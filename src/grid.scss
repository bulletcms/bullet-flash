@import 'util';

.container {
  width: 100%;
  margin: auto;
}

.grid-strict {
  width: 100%;
  &:after {
    content: "";
    display: block;
    clear: both;
  }
}

.grid {
  @extend .grid-strict;
  .col {
    padding: $grid-vertical-padding $grid-gutter-padding;
  }
}

// flexbox utilities
.flex-v-center {
  display: flex;
  align-items: center;
  flex-direction: row;
  flex-wrap: wrap;
}

.flex-v-stretch {
  display: flex;
  align-items: stretch;
  flex-direction: row;
  flex-wrap: wrap;
}
// end

.row:after {
  content: "";
  display: block;
  clear: both;
}

.col {
  float: left;
  width: 100%;
  max-width: 100%;
}

@mixin col-list($columns, $factor) {
  @for $i from 1 through $columns {
    .col#{$columns}-#{$i} {
      // increase column size to ceil of factor unless it ceils to 100%, exception being the full size column
      // if factor is greater than columns, then make (columns / factor) the 100% scale with exceptions for ceil to column
      width: if($i == $columns, 100%,
        if(ceil($i / $columns * $factor) == $factor,
          100% / $factor * floor($i / $columns * $factor),
          if($columns < $factor,
            100% * $columns / $factor / $factor * ceil($i / $columns * $factor),
            100% / $factor * ceil($i / $columns * $factor)
          )
        )
      );
    }
  }
}

@media (min-width: $grid-sm-breakpoint) and (max-width: $grid-md-breakpoint - 1px){
  @include col-list(12, 3);
  @include col-list(8, 4);
  .container {
    max-width: ($grid-sm-breakpoint + $grid-md-breakpoint) / 2;
  }
}

@media (min-width: $grid-md-breakpoint) and (max-width: $grid-lg-breakpoint - 1px){
  @include col-list(12, 12);
  @include col-list(8, 8);
  .container {
    max-width: $grid-md-breakpoint * 15 / 16;
  }
}

@media (min-width: $grid-lg-breakpoint){
  @include col-list(12, 24);
  @include col-list(8, 8);
  .container {
    max-width: $grid-lg-breakpoint * 15 / 16;
  }
}
